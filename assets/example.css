/* normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */
html {
  font-family: sans-serif;
  -ms-text-size-adjust: 100%;
  -webkit-text-size-adjust: 100%;
}
body {
  margin: 0;
}
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
menu,
nav,
section,
summary {
  display: block;
}
audio,
canvas,
progress,
video {
  display: inline-block;
  vertical-align: baseline;
}
audio:not([controls]) {
  display: none;
  height: 0;
}
[hidden],
template {
  display: none;
}
a {
  background-color: transparent;
}
a:active,
a:hover {
  outline: 0;
}
abbr[title] {
  border-bottom: 1px dotted;
}
b,
strong {
  font-weight: bold;
}
dfn {
  font-style: italic;
}
h1 {
  font-size: 2em;
  margin: 0.67em 0;
}
mark {
  background: #ff0;
  color: #000;
}
small {
  font-size: 80%;
}
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}
sup {
  top: -0.5em;
}
sub {
  bottom: -0.25em;
}
img {
  border: 0;
}
svg:not(:root) {
  overflow: hidden;
}
figure {
  margin: 1em 40px;
}
hr {
  -webkit-box-sizing: content-box;
  -moz-box-sizing: content-box;
  box-sizing: content-box;
  height: 0;
}
pre {
  overflow: auto;
}
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em;
}
button,
input,
optgroup,
select,
textarea {
  color: inherit;
  font: inherit;
  margin: 0;
}
button {
  overflow: visible;
}
button,
select {
  text-transform: none;
}
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  cursor: pointer;
}
button[disabled],
html input[disabled] {
  cursor: default;
}
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0;
}
input {
  line-height: normal;
}
input[type="checkbox"],
input[type="radio"] {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
  padding: 0;
}
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto;
}
input[type="search"] {
  -webkit-appearance: textfield;
  -webkit-box-sizing: content-box;
  -moz-box-sizing: content-box;
  box-sizing: content-box;
}
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em;
}
legend {
  border: 0;
  padding: 0;
}
textarea {
  overflow: auto;
}
optgroup {
  font-weight: bold;
}
table {
  border-collapse: collapse;
  border-spacing: 0;
}
td,
th {
  padding: 0;
}
html,
body {
  font-size: 15px;
  height: 100%;
}
body {
  font-family: "Open Sans", "Helvetica Neue", "Helvetica", "Arial", sans-serif;
  background: #fff;
  margin: 0px;
  padding: 0px;
  color: #333;
  text-rendering: optimizeLegibility;
  min-width: 320px;
}
h1,
h2,
h3,
h4,
h5 {
  font-family: 'Source Sans Pro', "Helvetica Neue", "Helvetica", "Arial", sans-serif;
}
.container {
  display: -webkit-box;
  display: -moz-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: box;
  display: flex;
}
.left {
  background: #333;
  color: #fff;
  width: 240px;
  position: fixed;
  top: 0;
  left: 0;
  bottom: 0;
}
.left header {
  padding: 12px 20px;
  border-bottom: 1px solid #222;
}
.left header .ember {
  color: #e1563f;
}
.left header .react {
  color: #61dafb;
}
.left nav {
  padding: 12px 0;
  border-top: 1px solid #3f3f3f;
}
.left nav div,
.left nav span,
.left nav object,
.left nav iframe,
.left nav h1,
.left nav h2,
.left nav h3,
.left nav h4,
.left nav h5,
.left nav h6,
.left nav p,
.left nav pre,
.left nav a,
.left nav abbr,
.left nav acronym,
.left nav address,
.left nav code,
.left nav del,
.left nav dfn,
.left nav em,
.left nav img,
.left nav dl,
.left nav dt,
.left nav dd,
.left nav ol,
.left nav ul,
.left nav li,
.left nav fieldset,
.left nav form,
.left nav label,
.left nav legend,
.left nav caption,
.left nav tbody,
.left nav tfoot,
.left nav thead,
.left nav tr {
  margin: 0;
  padding: 0;
  border: 0;
  outline: 0;
  font-weight: inherit;
  font-style: inherit;
  font-family: inherit;
  font-size: 100%;
  vertical-align: baseline;
}
.left nav table {
  border-collapse: separate;
  border-spacing: 0;
  vertical-align: middle;
}
.left nav caption,
.left nav th,
.left nav td {
  text-align: left;
  font-weight: normal;
  vertical-align: middle;
}
.left nav a img {
  border: none;
}
.left nav li {
  list-style: none;
}
.left nav a {
  display: block;
  padding: 12px 20px;
  color: inherit;
  text-decoration: none;
}
.left nav a:hover {
  background: #444;
}
.left nav a.active {
  background: #222;
  -webkit-box-shadow: 0px 1px 3px #111 inset;
  box-shadow: 0px 1px 3px #111 inset;
}
.left h2 {
  font-weight: bold;
  font-size: 24px;
  text-align: center;
}
.right {
  margin-left: 240px;
  -webkit-box-flex: 1;
  -moz-box-flex: 1;
  -o-box-flex: 1;
  box-flex: 1;
  -webkit-flex: 100%;
  -ms-flex: 100%;
  flex: 100%;
}
.content {
  margin: 40px 20px;
}
.profiles-index header {
  border-bottom: 1px solid #efefef;
}
.profiles-index header h1 {
  margin: 16px 20px;
  font-size: 20px;
}
.profiles-index header .subheader {
  display: -webkit-box;
  display: -moz-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: box;
  display: flex;
  padding: 12px 20px;
  border-top: 1px solid #efefef;
}
.profiles-index header .subheader .selection {
  -webkit-box-flex: 1;
  -moz-box-flex: 1;
  -o-box-flex: 1;
  box-flex: 1;
  -webkit-flex: 50%;
  -ms-flex: 50%;
  flex: 50%;
}
.profiles-index header .subheader .pagination {
  -webkit-box-flex: 1;
  -moz-box-flex: 1;
  -o-box-flex: 1;
  box-flex: 1;
  -webkit-flex: 50%;
  -ms-flex: 50%;
  flex: 50%;
  text-align: right;
}
.profiles-index .profiles {
  margin: 0;
  padding: 0;
  border: 0;
  outline: 0;
}
.profiles-index .profiles > li {
  padding: 14px 20px;
  list-style: none;
  display: -webkit-box;
  display: -moz-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: box;
  display: flex;
  -webkit-box-align: center;
  -moz-box-align: center;
  -o-box-align: center;
  -ms-flex-align: center;
  -webkit-align-items: center;
  align-items: center;
  border-bottom: 1px solid #efefef;
}
.profiles-index .profiles > li:hover {
  background: #f8f8f8;
}
.profiles-index .profiles > li.selected {
  background: #ffc;
}
.profiles-index .profiles > li > * {
  -webkit-box-flex: 0;
  -moz-box-flex: 0;
  -o-box-flex: 0;
  -ms-box-flex: 0;
  box-flex: 0;
  -webkit-flex-grow: 0;
  flex-grow: 0;
  -webkit-flex-shrink: 0;
  flex-shrink: 0;
}
.profiles-index .profiles > li time {
  text-align: right;
  font-size: 13px;
  color: #999;
}
.profiles-index .profiles > li input {
  margin-right: 12px;
}
.profiles-index .profiles > li .name {
  margin-left: 12px;
  margin-right: 12px;
}
.profiles-index .profiles > li .email {
  color: #999;
}
.profiles-index .profiles > li .email:before {
  content: "(";
}
.profiles-index .profiles > li .email:after {
  content: ")";
}
.profiles-index .profiles > li ul.tags {
  -webkit-box-flex: 1;
  -moz-box-flex: 1;
  -o-box-flex: 1;
  box-flex: 1;
  -webkit-flex: 100%;
  -ms-flex: 100%;
  flex: 100%;
  margin: 0;
  padding: 0;
  border: 0;
  outline: 0;
  margin-left: 20px;
  display: -webkit-box;
  display: -moz-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: box;
  display: flex;
}
.profiles-index .profiles > li ul.tags li {
  list-style: none;
  display: block;
  background: #efefef;
  padding: 4px 8px;
  font-size: 12px;
  margin-right: 4px;
}
/*# sourceMappingURL=data:application/json;base64, */